version: 0.2
run-as: root

phases:

  install:
    commands:
      - echo Setting up required prerequisites
      - pip install --upgrade awscli
      - curl --silent --location -o /usr/local/bin/kubectl "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
      - chmod +x /usr/local/bin/kubectl
      - curl --silent --location -o /usr/local/bin/aws-iam-authenticator "https://amazon-eks.s3-us-west-2.amazonaws.com/1.14.6/2019-08-22/bin/linux/amd64/aws-iam-authenticator"
      - chmod +x /usr/local/bin/aws-iam-authenticator
      - curl --silent --location "https://github.com/weaveworks/eksctl/releases/download/v0.72.0/eksctl_Linux_amd64.tar.gz" | tar xz -C /tmp
      - mv -v /tmp/eksctl /usr/local/bin
      - chmod +x /usr/local/bin/eksctl
      - AWS_ACCOUNT_ID=907263135169
      - IMAGE_TAG=latest

  pre_build:
    commands:
      - echo Logging in to Amazon EKS...
      - ls -l
      - chmod a+x ./eks/cluster-setup.sh
      - sh ./eks/cluster-setup.sh
      - aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name preview-server
      - echo check config 
      - kubectl config view --minify
      - echo check kubectl access
      - kubectl get svc
      - echo Logging in to Amazon ECR...
      - $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
      - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/preview-server
      
  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...          
      - docker build --cache-from $REPOSITORY_URI:$IMAGE_TAG -t preview-server:$IMAGE_TAG .
      - docker tag preview-server:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/preview-server:$IMAGE_TAG 

  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker image...
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/preview-server:$IMAGE_TAG
      - kubectl create -f https://raw.githubusercontent.com/NVIDIA/k8s-device-plugin/v1.10/nvidia-device-plugin.yml
      - kubectl apply -f nvidia-smi-pod.yaml
      - while [[ $(kubectl get pods -l app=preview-server-app -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}') != "True" ]]; do echo "waiting for pod" && sleep 1 && kubectl get pods -o wide; done
      - echo Push the latest image to cluster
      - kubectl apply -f ./eks/deployment.yaml
      - kubectl rollout -h
      - kubectl rollout restart -f ./eks/deployment.yaml
      - kubectl apply -f ./eks/service.yaml
      - kubectl get svc preview-server
      - export loadbalancer=$(kubectl get svc preview-server -o jsonpath='{.status.loadBalancer.ingress[*].hostname}')
      - kubectl get pods -o wide
      - while [[ $(kubectl get pods -l app=preview-server-app -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}') != "True" ]]; do echo "waiting for pod" && sleep 1; done
      - kubectl get pods -o wide
      - kubectl get endpoints
      - kubectl get deployments
      - kubectl logs -l app=preview-server-app
      - echo http://${loadbalancer}
      - curl -k http://${loadbalancer}


